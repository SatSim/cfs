        -:    0:Source:/Users/nyanchik/Desktop/cfs-sandbox/sc/fsw/src/sc_rtsrq.c
        -:    0:Graph:sc_rtsrq.gcno
        -:    0:Data:sc_rtsrq.gcda
        -:    0:Runs:1
        -:    0:Programs:5
        -:    1: /*************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: sc_rtsrq.c.gcov 1.2 2009/02/19 10:06:55EST nyanchik Exp  $
        -:    4: **
        -:    5: ** Purpose: 
        -:    6: **     This file contains functions to handle all of the RTS
        -:    7: **     executive requests and internal reuqests to control
        -:    8: **     the RTP and RTSs.
        -:    9: **
        -:   10: ** References:
        -:   11: **   Flight Software Branch C Coding Standard Version 1.2
        -:   12: **   CFS Development Standards Document
        -:   13: ** Notes:
        -:   14: **
        -:   15: **   $Log: sc_rtsrq.c.gcov  $
        -:   15: **   Revision 1.2 2009/02/19 10:06:55EST nyanchik 
        -:   15: **   Update SC To work with cFE 5.2 Config parameters
        -:   16: **   Revision 1.3 2009/01/26 14:47:15EST nyanchik 
        -:   17: **   Check in of Unit test
        -:   18: **   Revision 1.2 2009/01/05 08:26:56EST nyanchik 
        -:   19: **   Check in after code review changes
        -:   20: *************************************************************************/
        -:   21: 
        -:   22:/**************************************************************************
        -:   23: **
        -:   24: ** Include section
        -:   25: **
        -:   26: **************************************************************************/
        -:   27:#include "sc_atsrq.h"
        -:   28:#include "sc_cmds.h"
        -:   29:#include "sc_loads.h"
        -:   30:#include "sc_rtsrq.h"
        -:   31:#include "sc_state.h"
        -:   32:#include "sc_utils.h"
        -:   33:
        -:   34:/**************************************************************************
        -:   35: **
        -:   36: ** Functions
        -:   37: **
        -:   38: **************************************************************************/
        -:   39:
        -:   40:
        -:   41:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   42:/*                                                                 */
        -:   43:/* Starts and RTS                                                  */
        -:   44:/*                                                                 */
        -:   45:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   46:void SC_StartRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
       11:   47:{
        -:   48:    
        -:   49:    uint16                         RtsId;       /* the id of the rts to start */
        -:   50:    CFE_SB_MsgPtr_t                RtsPtr;      /* pointer to an rts command */
        -:   51:    SC_RtsCommandHeader_t*         RtsCmdHeaderPtr;
        -:   52:    uint16                         CmdLength;   /* the length of the 1st cmd */
        -:   53:
        -:   54:    
        -:   55:    /*
        -:   56:     ** Verify command packet length...
        -:   57:     */
       11:   58:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:   59:    {
        -:   60:        /* get the parameter to check and convert it to a 'C' number */
        9:   61:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:   62:        /*
        -:   63:         ** Check start RTS parameters
        -:   64:         */
        9:   65:        if (RtsId < SC_NUMBER_OF_RTS)
        -:   66:        {
        -:   67:            /* make sure that RTS is not disabled */
        8:   68:            if (SC_OperData.RtsInfoTblAddr[RtsId].DisabledFlag == FALSE)
        -:   69:            {
        -:   70:                /* the requested RTS is not being used and is not empty */
        6:   71:                if (SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus == SC_LOADED)
        -:   72:                {               
        -:   73:                    /*
        -:   74:                     ** Check the command length
        -:   75:                     */   
        5:   76:                    RtsCmdHeaderPtr = (SC_RtsCommandHeader_t*) &SC_OperData.RtsTblAddr[RtsId][0];
        5:   77:                    RtsPtr = (CFE_SB_MsgPtr_t)(RtsCmdHeaderPtr -> CmdHeader);
        -:   78:                    
        5:   79:                    CmdLength = CFE_SB_GetTotalMsgLength(RtsPtr); 
        -:   80:                     /* Make sure the command is big enough, but not too big  */
        5:   81:                    if (CmdLength >= SC_PACKET_MIN_SIZE  && CmdLength <= SC_PACKET_MAX_SIZE)
        -:   82:                    {                        
        -:   83:                        /*
        -:   84:                         **  Initialize the RTS info table entry
        -:   85:                         */
        4:   86:                        SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus = SC_EXECUTING;
        4:   87:                        SC_OperData.RtsInfoTblAddr[RtsId].CmdCtr = 0;
        4:   88:                        SC_OperData.RtsInfoTblAddr[RtsId].CmdErrCtr = 0;
        4:   89:                        SC_OperData.RtsInfoTblAddr[RtsId].NextCommandPtr = 0;
        4:   90:                        SC_OperData.RtsInfoTblAddr[RtsId].UseCtr ++;
        -:   91:                        
        -:   92:                        /* set the pointer to the next RTS command */
        -:   93:                        
        4:   94:                        RtsCmdHeaderPtr =   (SC_RtsCommandHeader_t*) &SC_OperData.RtsTblAddr[RtsId][0];
        4:   95:                        RtsPtr = (CFE_SB_MsgPtr_t)(RtsCmdHeaderPtr -> CmdHeader);
        -:   96:                                                       
        -:   97:           
        -:   98:                        /*
        -:   99:                         ** Get the absolute time for the RTSs next_cmd_time
        -:  100:                         ** using the current time and the relative time tag.
        -:  101:                         */
        4:  102:                        SC_OperData.RtsInfoTblAddr[RtsId].NextCommandTime  = 
        -:  103:                        SC_ComputeAbsTime(RtsCmdHeaderPtr  -> TimeTag);
        -:  104:
        -:  105:                        
        -:  106:                        /*
        -:  107:                         ** Last, Increment some global counters associated with the
        -:  108:                         ** starting of the RTS
        -:  109:                         */
        4:  110:                        SC_OperData.RtsCtrlBlckAddr -> NumRtsActive++;
        4:  111:                        SC_AppData.RtsActiveCtr++;
        4:  112:                        SC_AppData.CmdCtr++;
        -:  113:                        
        4:  114:                        if ((RtsId + 1) <= SC_LAST_RTS_WITH_EVENTS)
        -:  115:                        {
        3:  116:                            CFE_EVS_SendEvent (SC_RTS_START_INF_EID,
        -:  117:                                               CFE_EVS_INFORMATION,
        -:  118:                                               "RTS Number %03d Started",
        -:  119:                                               RtsId + 1);
        -:  120:                        }
        -:  121:                        else
        -:  122:                        {
        1:  123:                            CFE_EVS_SendEvent(SC_STARTRTS_CMD_DBG_EID,
        -:  124:                                              CFE_EVS_DEBUG,
        -:  125:                                              "Start RTS #%d command", RtsId +1);
        -:  126:                        }
        -:  127:                    }
        -:  128:                    else
        -:  129:                    { /* the length field of the 1st cmd was bad */
        1:  130:                        CFE_EVS_SendEvent (SC_STARTRTS_CMD_INVLD_LEN_ERR_EID,
        -:  131:                                           CFE_EVS_ERROR,
        -:  132:                                           "Start RTS %03d Rejected: Invld Len Field for 1st Cmd in Sequence. Invld Cmd Length = %d",
        -:  133:                                           RtsId + 1,
        -:  134:                                           CmdLength);
        -:  135:                        
        1:  136:                        SC_AppData.CmdErrCtr++;
        1:  137:                        SC_AppData.RtsActiveErrCtr++;
        -:  138:                        
        -:  139:                    } /* end if - check command number */
        -:  140:                }
        -:  141:                else
        -:  142:                {  /* Cannot use the RTS now */
        -:  143:                    
        1:  144:                    CFE_EVS_SendEvent (SC_STARTRTS_CMD_NOT_LDED_ERR_EID,
        -:  145:                                       CFE_EVS_ERROR,
        -:  146:                                       "Start RTS %03d Rejected: RTS Not Loaded or In Use, Status: %d",
        -:  147:                                       RtsId + 1,
        -:  148:                                       SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus);
        -:  149:                    
        1:  150:                    SC_AppData.CmdErrCtr++;
        1:  151:                    SC_AppData.RtsActiveErrCtr++;
        -:  152:                    
        -:  153:                    
        -:  154:                } /* end if */
        -:  155:            }
        -:  156:            else
        -:  157:            {  /* the RTS is disabled */
        2:  158:                CFE_EVS_SendEvent (SC_STARTRTS_CMD_DISABLED_ERR_EID,
        -:  159:                                   CFE_EVS_ERROR,
        -:  160:                                   "Start RTS %03d Rejected: RTS Disabled",
        -:  161:                                   RtsId + 1);
        -:  162:                
        2:  163:                SC_AppData.CmdErrCtr++;
        2:  164:                SC_AppData.RtsActiveErrCtr++;
        -:  165:                
        -:  166:            } /* end if */
        -:  167:        }
        -:  168:        else
        -:  169:        {     /* the rts id is invalid */
        1:  170:            CFE_EVS_SendEvent (SC_STARTRTS_CMD_INVALID_ERR_EID,
        -:  171:                               CFE_EVS_ERROR,
        -:  172:                               "Start RTS %03d Rejected: Invalid RTS ID",
        -:  173:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  174:            
        1:  175:            SC_AppData.CmdErrCtr++;
        1:  176:            SC_AppData.RtsActiveErrCtr++;
        -:  177:            
        -:  178:        }
        -:  179:    }
        -:  180:    else
        -:  181:    {     /* the command length is invalid */
        2:  182:        SC_AppData.RtsActiveErrCtr++;
        -:  183:    }
        -:  184:    
        -:  185:} /* end SC_StartRts */
        -:  186:
        -:  187:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  188:/*                                                                 */
        -:  189:/* Stops an RTS                                                    */
        -:  190:/*                                                                 */
        -:  191:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  192:void SC_StopRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
        2:  193:{
        -:  194:    uint16      RtsId;         /* the RTS number from the command packet */
        -:  195:
        2:  196:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:  197:    {
        -:  198:        /*
        -:  199:         ** Get the RTS id with a 'C' interface
        -:  200:         */
        2:  201:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:  202:        
        -:  203:        /* check the command parameter */
        2:  204:        if (RtsId < SC_NUMBER_OF_RTS)
        -:  205:        {
        -:  206:            /* stop the rts by calling a generic routine */
        1:  207:            SC_KillRts (RtsId);
        -:  208:            
        1:  209:            SC_AppData.CmdCtr++;
        -:  210:            
        1:  211:            CFE_EVS_SendEvent (SC_STOPRTS_CMD_INF_EID,
        -:  212:                               CFE_EVS_INFORMATION,
        -:  213:                               "Relative Time Sequence %03d Aborted",
        -:  214:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  215:        }
        -:  216:        else
        -:  217:        {/* the specified RTS is invalid */
        -:  218:            
        -:  219:            /* the rts id is invalid */
        1:  220:            CFE_EVS_SendEvent (SC_STOPRTS_CMD_ERR_EID,
        -:  221:                               CFE_EVS_ERROR,
        -:  222:                               "Stop RTS %03d rejected: Invalid RTS ID",
        -:  223:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  224:            
        1:  225:            SC_AppData.CmdErrCtr++;
        -:  226:            
        -:  227:        } /* end if */
        -:  228:    }
        -:  229:} /* end SC_StopRtsCmd */
        -:  230:
        -:  231:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  232:/*                                                                 */
        -:  233:/* Disables an RTS                                                 */
        -:  234:/*                                                                 */
        -:  235:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  236:void SC_DisableRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
        6:  237:{
        -:  238:    uint16      RtsId;         /* the RTS number from the command packet */
        -:  239:
        6:  240:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:  241:    {
        -:  242:        /*
        -:  243:         ** Get the RTS id with a 'C' interface
        -:  244:         */
        6:  245:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:  246:        
        -:  247:        /* make sure tha specified rts is valid */
        6:  248:        if (RtsId < SC_NUMBER_OF_RTS)
        -:  249:        {
        -:  250:            
        -:  251:            /* disable the RTS */
        5:  252:            SC_OperData.RtsInfoTblAddr[RtsId].DisabledFlag = TRUE;
        -:  253:            
        -:  254:            /* update the command status */
        5:  255:            SC_AppData.CmdCtr++;
        -:  256:            
        5:  257:            CFE_EVS_SendEvent (SC_DISABLE_RTS_DEB_EID,
        -:  258:                               CFE_EVS_DEBUG,
        -:  259:                               "Disabled RTS %03d",
        -:  260:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);   
        -:  261:        }
        -:  262:        else
        -:  263:        {   /* it is not a valid RTS id */
        1:  264:            CFE_EVS_SendEvent (SC_DISRTS_CMD_ERR_EID,
        -:  265:                               CFE_EVS_ERROR,
        -:  266:                               "Disable RTS %03d Rejected: Invalid RTS ID",
        -:  267:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  268:            
        -:  269:            /* update the command error status */
        1:  270:            SC_AppData.CmdErrCtr++;     
        -:  271:        } /* end if */
        -:  272:    } 
        -:  273:} /* end SC_DisableRTS */
        -:  274:
        -:  275:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  276:/*                                                                 */
        -:  277:/* Enables an RTS                                                  */
        -:  278:/*                                                                 */
        -:  279:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  280:void SC_EnableRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
        7:  281:{
        -:  282:    uint16      RtsId;         /* the RTS number from the command packet */
        -:  283:
        7:  284:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:  285:    {
        -:  286:         /*
        -:  287:         ** Get the RTS id with a 'C' interface
        -:  288:         */
        6:  289:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:  290:        /* make sure the specified rts is valid */
        6:  291:        if (RtsId < SC_NUMBER_OF_RTS)
        -:  292:        {
        -:  293:            
        -:  294:            /* re-enable the RTS */
        5:  295:            SC_OperData.RtsInfoTblAddr[RtsId].DisabledFlag = FALSE;
        -:  296:            
        -:  297:            /* update the command status */
        5:  298:            SC_AppData.CmdCtr++;
        -:  299:            
        5:  300:            CFE_EVS_SendEvent (SC_ENABLE_RTS_DEB_EID,
        -:  301:                               CFE_EVS_DEBUG ,
        -:  302:                               "Enabled RTS %03d",
        -:  303:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  304:            
        -:  305:            
        -:  306:        }
        -:  307:        else
        -:  308:        {   /* it is not a valid RTS id */
        1:  309:            CFE_EVS_SendEvent (SC_ENARTS_CMD_ERR_EID,
        -:  310:                               CFE_EVS_ERROR,
        -:  311:                               "Enable RTS %03d Rejected: Invalid RTS ID",
        -:  312:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  313:            
        -:  314:            /* update the command error status */
        1:  315:            SC_AppData.CmdErrCtr++;
        -:  316:            
        -:  317:            
        -:  318:        } /* end if */
        -:  319:    }
        -:  320:    
        -:  321:    
        -:  322:} /* end SC_EnableRTS */
        -:  323:
        -:  324:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  325:/*                                                                 */
        -:  326:/*  Kill an RTS and clear out its data                             */
        -:  327:/*                                                                 */
        -:  328:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  329:void SC_KillRts (uint16 RtsId)
        8:  330:{    
        8:  331:    if (SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus == SC_EXECUTING)
        -:  332:    {
        -:  333:
        -:  334:        /*
        -:  335:         ** Note, the RtsId passed is a 'C' number.
        -:  336:         ** range = 0..n
        -:  337:         */
        -:  338:        
        -:  339:        /*
        -:  340:         ** Stop the RTS from executing
        -:  341:         */
        8:  342:        SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus = SC_LOADED;
        8:  343:        SC_OperData.RtsInfoTblAddr[RtsId].NextCommandTime = SC_MAX_TIME;
        -:  344:        
        -:  345:        /*
        -:  346:         ** Note: the rest of the fields are left alone
        -:  347:         ** to provide information on where the
        -:  348:         ** rts stopped. They are cleared out when it is restarted.
        -:  349:         */
        -:  350:        
        8:  351:        if (SC_OperData.RtsCtrlBlckAddr -> NumRtsActive > 0)
        -:  352:        {
        4:  353:            SC_OperData.RtsCtrlBlckAddr -> NumRtsActive--;
        -:  354:        }
        -:  355:    }
        -:  356:
        -:  357:} /* end SC_KillRts */
        -:  358:
        -:  359:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  360:/*                                                                 */
        -:  361:/* Start an RTS on initilization                                   */
        -:  362:/*                                                                 */
        -:  363:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  364:void SC_AutoStartRts (uint16 RtsNumber)
        1:  365:{
        -:  366:    SC_RtsCmd_t   CmdPkt;    /* the command packet to start an RTS */
        -:  367:
        -:  368:    /*
        -:  369:     ** Format the command packet to start the first RTS
        -:  370:     */
        -:  371:    
        1:  372:    CFE_SB_InitMsg(&CmdPkt, SC_CMD_MID, sizeof(SC_RtsCmd_t), TRUE);
        -:  373:    
        1:  374:    CFE_SB_SetCmdCode((CFE_SB_MsgPtr_t)  &CmdPkt, SC_START_RTS_CC);
        -:  375:    
        -:  376:    /*
        -:  377:     ** Get the RTS ID to start.
        -:  378:     */
        1:  379:    CmdPkt.RtsId = RtsNumber;
        -:  380:    
        -:  381:    /*
        -:  382:     ** Now send the command back to SC
        -:  383:     */
        1:  384:    CFE_SB_SendMsg((CFE_SB_MsgPtr_t)((int)&CmdPkt));
        -:  385:       
        -:  386:} /* end SC_AutoStartRts */
        -:  387:
        -:  388:/************************/
        -:  389:/*  End of File Comment */
        -:  390:/************************/
