        -:    0:Source:/Users/nyanchik/Desktop/cfs-sandbox/sc/fsw/src/sc_state.c
        -:    0:Graph:sc_state.gcno
        -:    0:Data:sc_state.gcda
        -:    0:Runs:1
        -:    0:Programs:6
        -:    1: /*************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: sc_state.c.gcov 1.1 2009/01/26 14:39:21EST nyanchik Exp  $
        -:    4: **
        -:    5: ** Purpose: 
        -:    6: **   This file contains functions to handle getting the next time of
        -:    7: **   commands for the ATP and RTP  as well as updating the time for
        -:    8: **   Stored Command.
        -:    9: **
        -:   10: ** References:
        -:   11: **   Flight Software Branch C Coding Standard Version 1.2
        -:   12: **   CFS Development Standards Document
        -:   13: ** Notes:
        -:   14: **
        -:   15: **   $Log: sc_state.c.gcov  $
        -:   15: **   Revision 1.1 2009/01/26 14:39:21EST nyanchik 
        -:   15: **   Initial revision
        -:   15: **   Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/sc/fsw/unit_test/WithCDSOn/project.pj
        -:   15: **   Revision 1.1 2009/01/26 14:20:10EST nyanchik 
        -:   15: **   Initial revision
        -:   15: **   Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/sc/fsw/unit_test/project.pj
        -:   16: **   Revision 1.2 2009/01/05 08:26:57EST nyanchik 
        -:   17: **   Check in after code review changes
        -:   18: *************************************************************************/
        -:   19:
        -:   20:/**************************************************************************
        -:   21: **
        -:   22: ** Include section
        -:   23: **
        -:   24: **************************************************************************/
        -:   25:
        -:   26:#include "sc_atsrq.h"
        -:   27:#include "sc_cmds.h"
        -:   28:#include "sc_loads.h"
        -:   29:#include "sc_rtsrq.h"
        -:   30:#include "sc_state.h"
        -:   31:#include "sc_utils.h"
        -:   32:
        -:   33:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   34:/*                                                                 */
        -:   35:/*  Gets the time of the next RTS command                          */
        -:   36:/*                                                                 */
        -:   37:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   38:void SC_GetNextRtsTime (void)
    #####:   39:{
        -:   40:    
        -:   41:    int16               i;          /* loop counter MUST be SIGNED !*/
        -:   42:    uint16              NextRts;    /* the next rts to schedule */
        -:   43:    SC_AbsTimeTag_t     NextTime;   /* the next time for the RTS */
        -:   44:
    #####:   45:    NextRts = 0xFFFF;
    #####:   46:    NextTime = SC_MAX_TIME;
        -:   47:        
        -:   48:    /*
        -:   49:     ** Go through the table backwards to account for the RTS priority 
        -:   50:     ** Lower number RTS's get higher priority
        -:   51:     */
    #####:   52:    for (i = SC_NUMBER_OF_RTS - 1; i >= 0; i--)
        -:   53:    {
    #####:   54:        if (SC_OperData.RtsInfoTblAddr[i].RtsStatus == SC_EXECUTING)
        -:   55:        {   
    #####:   56:            if (SC_OperData.RtsInfoTblAddr[i].NextCommandTime <= NextTime)
        -:   57:            {       
    #####:   58:                NextTime = SC_OperData.RtsInfoTblAddr[i].NextCommandTime;
    #####:   59:                NextRts = i;   
        -:   60:            } /* end if */ 
        -:   61:        } /* end if */ 
        -:   62:    } /* end for */
        -:   63:    
    #####:   64:    if (NextRts == 0xFFFF)
        -:   65:    {
    #####:   66:        SC_OperData.RtsCtrlBlckAddr -> RtsNumber = SC_INVALID_RTS_NUMBER;
    #####:   67:        SC_AppData.NextCmdTime[SC_RTP] = SC_MAX_TIME;
        -:   68:    }
        -:   69:    else
        -:   70:    {
    #####:   71:        SC_OperData.RtsCtrlBlckAddr -> RtsNumber = NextRts + 1;
    #####:   72:        SC_AppData.NextCmdTime[SC_RTP] = NextTime;
        -:   73:    } /* end if */
        -:   74:    
        -:   75:    
        -:   76:} /* end SC_GetNextRtsTime */
        -:   77:
        -:   78:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   79:/*                                                                 */
        -:   80:/* Decides whether an RTS or ATS command gets scheduled next       */
        -:   81:/*                                                                 */
        -:   82:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   83:void SC_UpdateNextTime (void)
    #####:   84:{
        -:   85:    /*
        -:   86:     ** First, find out which RTS needs to run next
        -:   87:     */
    #####:   88:    SC_GetNextRtsTime();
        -:   89:    
        -:   90:    /*
        -:   91:     ** Start out with a default, no processors need to run next
        -:   92:     */
    #####:   93:    SC_AppData.NextProcNumber = SC_NONE;
        -:   94:    
        -:   95:    
        -:   96:    /*
        -:   97:     ** Check to see if the ATP needs to schedule commands
        -:   98:     */
    #####:   99:    if (SC_OperData.AtsCtrlBlckAddr -> AtpState == SC_EXECUTING)
        -:  100:    {
    #####:  101:        SC_AppData.NextProcNumber = SC_ATP;
        -:  102:    }
        -:  103:    /*
        -:  104:     ** Last, check to see if there is an RTS that needs to schedule commands
        -:  105:     ** This is determined by the RTS number in the RTP control block
        -:  106:     ** If it is zero, there is no RTS that needs to run
        -:  107:     */
    #####:  108:    if (SC_OperData.RtsCtrlBlckAddr -> RtsNumber > 0 &&
        -:  109:        SC_OperData.RtsCtrlBlckAddr -> RtsNumber <= SC_NUMBER_OF_RTS)
        -:  110:    { 
        -:  111:        /*
        -:  112:         ** If the RTP needs to send commands, only send them if
        -:  113:         ** the RTP time is less than the ATP time. Otherwise
        -:  114:         ** the ATP has priority
        -:  115:         */
    #####:  116:        if (SC_AppData.NextCmdTime[SC_RTP] < SC_AppData.NextCmdTime[SC_ATP])
        -:  117:        {
    #####:  118:            SC_AppData.NextProcNumber = SC_RTP;
        -:  119:        }       
        -:  120:    } /* end if */
        -:  121:} /* end SC_UpdateNextTime */
        -:  122:
        -:  123:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  124:/*                                                                 */
        -:  125:/* Gets the next RTS Command                                       */
        -:  126:/*                                                                 */
        -:  127:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  128:void SC_GetNextRtsCommand(void)
    #####:  129:{ 
        -:  130:    uint16                      RtsNum;
        -:  131:    uint16                      CmdOffset;
        -:  132:    CFE_SB_MsgPtr_t             CmdPtr;
        -:  133:    SC_RtsCommandHeader_t*      RtsCmdHeaderPtr;
        -:  134:    uint16                      CmdLength;
        -:  135:       
        -:  136:    /*
        -:  137:     ** Make sure that the RTP is executing some RTS
        -:  138:     */
    #####:  139:    if ((SC_OperData.RtsCtrlBlckAddr -> RtsNumber > 0) &&
        -:  140:         (SC_OperData.RtsCtrlBlckAddr -> RtsNumber <= SC_NUMBER_OF_RTS))
        -:  141:    {
        -:  142:        /* Get the number of the rts that is running */
    #####:  143:        RtsNum = SC_OperData.RtsCtrlBlckAddr -> RtsNumber - 1;
        -:  144:        
        -:  145:        /*
        -:  146:         ** Find out if the RTS is EXECUTING or just STARTED
        -:  147:         */
    #####:  148:        if (SC_OperData.RtsInfoTblAddr[RtsNum].RtsStatus == SC_EXECUTING)
        -:  149:        {
        -:  150:            /*
        -:  151:             ** Get the information needed to find the next command
        -:  152:             */
    #####:  153:            CmdOffset = SC_OperData.RtsInfoTblAddr[RtsNum].NextCommandPtr;
        -:  154:            
    #####:  155:            RtsCmdHeaderPtr = (SC_RtsCommandHeader_t*) &SC_OperData.RtsTblAddr[RtsNum][CmdOffset];
    #####:  156:            CmdPtr = (CFE_SB_MsgPtr_t) (RtsCmdHeaderPtr -> CmdHeader);
        -:  157:            
    #####:  158:            CmdLength = CFE_SB_GetTotalMsgLength(CmdPtr) + SC_RTS_HEADER_SIZE;
        -:  159:            
        -:  160:            /*
        -:  161:             ** calculate the new command offset and new command length
        -:  162:             ** Cmd Length is in bytes, so we convert it to words
        -:  163:             */
    #####:  164:            CmdOffset = CmdOffset + (CmdLength / SC_BYTES_IN_WORD);
        -:  165:
        -:  166:            /*
        -:  167:             ** if the end of the buffer is not reached.
        -:  168:             ** This check is made to make sure that at least the minimum
        -:  169:             ** Sized packet fits in the buffer. It assures we are not reading
        -:  170:             ** bogus length info from other data.
        -:  171:             */
        -:  172:
        -:  173:            /* If at least the header for a command plus the RTS header can fit in the buffer */
    #####:  174:            if (CmdOffset <  (SC_RTS_BUFF_SIZE - (sizeof(SC_RtsCommandHeader_t)/ SC_BYTES_IN_WORD)))
        -:  175:            {
        -:  176:                /*
        -:  177:                 ** Get a pointer to the next RTS command
        -:  178:                 */
    #####:  179:                RtsCmdHeaderPtr = (SC_RtsCommandHeader_t*) &SC_OperData.RtsTblAddr[RtsNum][CmdOffset];
    #####:  180:                CmdPtr = (CFE_SB_MsgPtr_t) (RtsCmdHeaderPtr -> CmdHeader);
        -:  181:                
        -:  182:                /*
        -:  183:                 ** get the length of the new command
        -:  184:                 */
    #####:  185:                CmdLength = CFE_SB_GetTotalMsgLength(CmdPtr) + SC_RTS_HEADER_SIZE;
        -:  186:                
        -:  187:                /*
        -:  188:                 ** Check to see if the command length is less than the size of a header.
        -:  189:                 ** This indicates that there are no more commands
        -:  190:                 */
        -:  191:                
    #####:  192:                if ((CmdLength - SC_RTS_HEADER_SIZE) >= (SC_PACKET_MIN_SIZE))
        -:  193:                {
        -:  194:                    
        -:  195:                    /*
        -:  196:                     ** Check to see if the command length is too big
        -:  197:                     ** If it is , then there is an error with the command
        -:  198:                     */
    #####:  199:                    if ((CmdLength - SC_RTS_HEADER_SIZE) <= SC_PACKET_MAX_SIZE )
        -:  200:                    {
        -:  201:                        
        -:  202:                        /*
        -:  203:                         ** Last Check is to check to see if the command
        -:  204:                         ** runs off of the end of the buffer
        -:  205:                         */
    #####:  206:                        if (CmdOffset + (CmdLength/ SC_BYTES_IN_WORD) <= SC_RTS_BUFF_SIZE)
        -:  207:                        {
        -:  208:                            
        -:  209:                            /*
        -:  210:                             ** Everything passed!
        -:  211:                             ** Update the proper next command time for that RTS
        -:  212:                             */
    #####:  213:                            SC_OperData.RtsInfoTblAddr[RtsNum].NextCommandTime = 
        -:  214:                            SC_ComputeAbsTime(RtsCmdHeaderPtr -> TimeTag);
        -:  215:                            
        -:  216:                            /*
        -:  217:                             ** Update the appropriate RTS info table current command pointer
        -:  218:                             */
    #####:  219:                            SC_OperData.RtsInfoTblAddr[RtsNum].NextCommandPtr = CmdOffset;
        -:  220:                            
        -:  221:                        }
        -:  222:                        else
        -:  223:                        { /* the command runs past the end of the buffer */
        -:  224:                            
        -:  225:                            /*
        -:  226:                             ** Having a command that runs off of the end of the buffer
        -:  227:                             ** is an error condition, so record it
        -:  228:                             */
    #####:  229:                            SC_AppData.RtsCmdErrCtr++;
    #####:  230:                            SC_OperData.RtsInfoTblAddr[RtsNum].CmdErrCtr++;
    #####:  231:                            SC_AppData.LastRtsErrSeq = SC_OperData.RtsCtrlBlckAddr -> RtsNumber;
    #####:  232:                            SC_AppData.LastRtsErrCmd = CmdOffset;
        -:  233:                            
        -:  234:                            /*
        -:  235:                             ** Stop the RTS from executing
        -:  236:                             */
    #####:  237:                            SC_KillRts (RtsNum);
    #####:  238:                            CFE_EVS_SendEvent (SC_RTS_LNGTH_ERR_EID,
        -:  239:                                               CFE_EVS_ERROR,
        -:  240:                                               "Cmd Runs passed end of table, RTS %03d Aborted",
        -:  241:                                               SC_OperData.RtsCtrlBlckAddr -> RtsNumber);
        -:  242:                            
        -:  243:                        } /* end if the command runs off the end of the buffer */
        -:  244:                        
        -:  245:                    }
        -:  246:                    else
        -:  247:                    { /* the command length is too large */
        -:  248:                        
        -:  249:                        /* update the error information */
    #####:  250:                        SC_AppData.RtsCmdErrCtr++;
    #####:  251:                        SC_OperData.RtsInfoTblAddr[RtsNum].CmdErrCtr++;
    #####:  252:                        SC_AppData.LastRtsErrSeq = SC_OperData.RtsCtrlBlckAddr -> RtsNumber;
    #####:  253:                        SC_AppData.LastRtsErrCmd = CmdOffset;
        -:  254:                        
        -:  255:                        /* Stop the RTS from executing */
    #####:  256:                        SC_KillRts (RtsNum);
    #####:  257:                        CFE_EVS_SendEvent (SC_RTS_CMD_LNGTH_ERR_EID,
        -:  258:                                           CFE_EVS_ERROR,
        -:  259:                                           "Invalid Length Field in RTS Command, RTS %03d Aborted. Length: %d, Max: %d",
        -:  260:                                           SC_OperData.RtsCtrlBlckAddr -> RtsNumber,
        -:  261:                                           (CmdLength - SC_RTS_HEADER_SIZE),
        -:  262:                                           SC_PACKET_MAX_SIZE);
        -:  263:                        
        -:  264:                    } /* end if the command length is invalid */
        -:  265:                }
        -:  266:                else
        -:  267:                { /* The command length is zero indicating no more cmds */
        -:  268:                    
        -:  269:                    /*
        -:  270:                     **  This is not an error condition, so stop the RTS
        -:  271:                     */
        -:  272:                    
        -:  273:                    /* Stop the RTS from executing */
    #####:  274:                    SC_KillRts (RtsNum);
    #####:  275:                    if ((RtsNum + 1) <= SC_LAST_RTS_WITH_EVENTS)
        -:  276:                    {
    #####:  277:                        CFE_EVS_SendEvent (SC_RTS_COMPL_INF_EID,
        -:  278:                                           CFE_EVS_INFORMATION,
        -:  279:                                           "Relative Time Sequence %03d Execution Completed",
        -:  280:                                           RtsNum + 1);
        -:  281:                    }
        -:  282:                }
        -:  283:            }
        -:  284:            else
        -:  285:            {  /* The end of the RTS buffer has been reached... */
        -:  286:                
        -:  287:                
        -:  288:                /* Stop the RTS from executing */
    #####:  289:                SC_KillRts (RtsNum);
    #####:  290:                if ((RtsNum + 1) <= SC_LAST_RTS_WITH_EVENTS)
        -:  291:                {
    #####:  292:                    CFE_EVS_SendEvent (SC_RTS_COMPL_INF_EID,
        -:  293:                                       CFE_EVS_INFORMATION,
        -:  294:                                       "Relative Time Sequence %03d Execution Completed",
        -:  295:                                       RtsNum + 1);
        -:  296:                }
        -:  297:                
        -:  298:            } /* end if */
        -:  299:            
        -:  300:        } /* end if the RTS status is EXECUTING */
        -:  301:        
        -:  302:    } /* end if the RTS number is valid */
        -:  303:    
        -:  304:} /* end SC_GetNextRtsCommand */
        -:  305:
        -:  306:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  307:/*                                                                 */
        -:  308:/* Gets the next ATS Command                                       */
        -:  309:/*                                                                 */
        -:  310:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  311:void SC_GetNextAtsCommand(void)
    #####:  312:{
        -:  313:    
        -:  314:    uint16      AtsId;         /* the ats identifier */
        -:  315:    uint16      TimeIndex;     /* a time index pointer */
        -:  316:
        -:  317:    
    #####:  318:    if (SC_OperData.AtsCtrlBlckAddr -> AtpState == SC_EXECUTING)
        -:  319:    {
        -:  320:        
        -:  321:        /*
        -:  322:         ** Get the information that is needed to find the next command
        -:  323:         */
    #####:  324:        AtsId = SC_OperData.AtsCtrlBlckAddr -> AtsNumber - 1;
    #####:  325:        TimeIndex = SC_OperData.AtsCtrlBlckAddr -> TimeIndexPtr + 1;
        -:  326:        
        -:  327:        /*
        -:  328:         ** Check to see if there are more ATS commands
        -:  329:         */
    #####:  330:        if (TimeIndex < SC_OperData.AtsInfoTblAddr[AtsId].NumberOfCommands)
        -:  331:        {
        -:  332:
        -:  333:            
        -:  334:            /* get the information for the next command in the ATP control block */
    #####:  335:            SC_OperData.AtsCtrlBlckAddr -> TimeIndexPtr = TimeIndex;
    #####:  336:            SC_OperData.AtsCtrlBlckAddr -> CmdNumber = SC_AppData.AtsTimeIndexBuffer[AtsId][TimeIndex];
        -:  337:            
        -:  338:            /* update the next command time */
    #####:  339:            SC_AppData.NextCmdTime[SC_ATP]  = 
        -:  340:                       SC_AppData.AtsCmdIndexBuffer[AtsId][SC_OperData.AtsCtrlBlckAddr -> CmdNumber] -> TimeTag; 
        -:  341:        }
        -:  342:        else
        -:  343:        { /* the end is near... of the ATS buffer that is */
        -:  344:            
        -:  345:            /* stop the ATS */
    #####:  346:            SC_KillAts();
    #####:  347:            CFE_EVS_SendEvent (SC_ATS_COMPL_INF_EID,
        -:  348:                               CFE_EVS_INFORMATION,
        -:  349:                               "Absolute Time Tagged Sequence %c Execution Completed",
        -:  350:                               (AtsId?'B':'A'));
        -:  351:
        -:  352:            
        -:  353:            /* stop any switch that is pending */
        -:  354:            /* because we just ran out of commands and are stopping the ATS */
        -:  355:            /* and for the safe switch pend, that is a no-no */
    #####:  356:            SC_OperData.AtsCtrlBlckAddr -> SwitchPendFlag = FALSE;
        -:  357:            
        -:  358:        } /* end if */
        -:  359:        
        -:  360:    }
    #####:  361:    else if (SC_OperData.AtsCtrlBlckAddr -> AtpState == SC_STARTING)
        -:  362:    {        
    #####:  363:        SC_OperData.AtsCtrlBlckAddr -> AtpState = SC_EXECUTING;
        -:  364:        
        -:  365:    } /* end if ATS is EXECUTING*/
        -:  366:    
        -:  367:} /* end SC_GetNextAtsCommand */
        -:  368:
        -:  369:
        -:  370:/************************/
        -:  371:/*  End of File Comment */
        -:  372:/************************/
        -:  373:
