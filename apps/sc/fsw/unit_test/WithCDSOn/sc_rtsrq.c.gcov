        -:    0:Source:/Users/nyanchik/Desktop/cfs-sandbox/sc/fsw/src/sc_rtsrq.c
        -:    0:Graph:sc_rtsrq.gcno
        -:    0:Data:sc_rtsrq.gcda
        -:    0:Runs:1
        -:    0:Programs:5
        -:    1: /*************************************************************************
        -:    2: ** File:
        -:    3: **   $Id: sc_rtsrq.c.gcov 1.1 2009/01/26 14:39:20EST nyanchik Exp  $
        -:    4: **
        -:    5: ** Purpose: 
        -:    6: **     This file contains functions to handle all of the RTS
        -:    7: **     executive requests and internal reuqests to control
        -:    8: **     the RTP and RTSs.
        -:    9: **
        -:   10: ** References:
        -:   11: **   Flight Software Branch C Coding Standard Version 1.2
        -:   12: **   CFS Development Standards Document
        -:   13: ** Notes:
        -:   14: **
        -:   15: **   $Log: sc_rtsrq.c.gcov  $
        -:   15: **   Revision 1.1 2009/01/26 14:39:20EST nyanchik 
        -:   15: **   Initial revision
        -:   15: **   Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/sc/fsw/unit_test/WithCDSOn/project.pj
        -:   15: **   Revision 1.1 2009/01/26 14:20:08EST nyanchik 
        -:   15: **   Initial revision
        -:   15: **   Member added to project c:/MKSDATA/MKS-REPOSITORY/CFS-REPOSITORY/sc/fsw/unit_test/project.pj
        -:   16: **   Revision 1.2 2009/01/05 08:26:56EST nyanchik 
        -:   17: **   Check in after code review changes
        -:   18: *************************************************************************/
        -:   19: 
        -:   20:/**************************************************************************
        -:   21: **
        -:   22: ** Include section
        -:   23: **
        -:   24: **************************************************************************/
        -:   25:#include "sc_atsrq.h"
        -:   26:#include "sc_cmds.h"
        -:   27:#include "sc_loads.h"
        -:   28:#include "sc_rtsrq.h"
        -:   29:#include "sc_state.h"
        -:   30:#include "sc_utils.h"
        -:   31:
        -:   32:/**************************************************************************
        -:   33: **
        -:   34: ** Functions
        -:   35: **
        -:   36: **************************************************************************/
        -:   37:
        -:   38:
        -:   39:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   40:/*                                                                 */
        -:   41:/* Starts and RTS                                                  */
        -:   42:/*                                                                 */
        -:   43:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:   44:void SC_StartRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
    #####:   45:{
        -:   46:    
        -:   47:    uint16                         RtsId;       /* the id of the rts to start */
        -:   48:    CFE_SB_MsgPtr_t                RtsPtr;      /* pointer to an rts command */
        -:   49:    SC_RtsCommandHeader_t*         RtsCmdHeaderPtr;
        -:   50:    uint16                         CmdLength;   /* the length of the 1st cmd */
        -:   51:
        -:   52:    
        -:   53:    /*
        -:   54:     ** Verify command packet length...
        -:   55:     */
    #####:   56:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:   57:    {
        -:   58:        /* get the parameter to check and convert it to a 'C' number */
    #####:   59:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:   60:        /*
        -:   61:         ** Check start RTS parameters
        -:   62:         */
    #####:   63:        if (RtsId < SC_NUMBER_OF_RTS)
        -:   64:        {
        -:   65:            /* make sure that RTS is not disabled */
    #####:   66:            if (SC_OperData.RtsInfoTblAddr[RtsId].DisabledFlag == FALSE)
        -:   67:            {
        -:   68:                /* the requested RTS is not being used and is not empty */
    #####:   69:                if (SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus == SC_LOADED)
        -:   70:                {               
        -:   71:                    /*
        -:   72:                     ** Check the command length
        -:   73:                     */   
    #####:   74:                    RtsCmdHeaderPtr = (SC_RtsCommandHeader_t*) &SC_OperData.RtsTblAddr[RtsId][0];
    #####:   75:                    RtsPtr = (CFE_SB_MsgPtr_t)(RtsCmdHeaderPtr -> CmdHeader);
        -:   76:                    
    #####:   77:                    CmdLength = CFE_SB_GetTotalMsgLength(RtsPtr); 
        -:   78:                     /* Make sure the command is big enough, but not too big  */
    #####:   79:                    if (CmdLength >= SC_PACKET_MIN_SIZE  && CmdLength <= SC_PACKET_MAX_SIZE)
        -:   80:                    {                        
        -:   81:                        /*
        -:   82:                         **  Initialize the RTS info table entry
        -:   83:                         */
    #####:   84:                        SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus = SC_EXECUTING;
    #####:   85:                        SC_OperData.RtsInfoTblAddr[RtsId].CmdCtr = 0;
    #####:   86:                        SC_OperData.RtsInfoTblAddr[RtsId].CmdErrCtr = 0;
    #####:   87:                        SC_OperData.RtsInfoTblAddr[RtsId].NextCommandPtr = 0;
    #####:   88:                        SC_OperData.RtsInfoTblAddr[RtsId].UseCtr ++;
        -:   89:                        
        -:   90:                        /* set the pointer to the next RTS command */
        -:   91:                        
    #####:   92:                        RtsCmdHeaderPtr =   (SC_RtsCommandHeader_t*) &SC_OperData.RtsTblAddr[RtsId][0];
    #####:   93:                        RtsPtr = (CFE_SB_MsgPtr_t)(RtsCmdHeaderPtr -> CmdHeader);
        -:   94:                                                       
        -:   95:           
        -:   96:                        /*
        -:   97:                         ** Get the absolute time for the RTSs next_cmd_time
        -:   98:                         ** using the current time and the relative time tag.
        -:   99:                         */
    #####:  100:                        SC_OperData.RtsInfoTblAddr[RtsId].NextCommandTime  = 
        -:  101:                        SC_ComputeAbsTime(RtsCmdHeaderPtr  -> TimeTag);
        -:  102:
        -:  103:                        
        -:  104:                        /*
        -:  105:                         ** Last, Increment some global counters associated with the
        -:  106:                         ** starting of the RTS
        -:  107:                         */
    #####:  108:                        SC_OperData.RtsCtrlBlckAddr -> NumRtsActive++;
    #####:  109:                        SC_AppData.RtsActiveCtr++;
    #####:  110:                        SC_AppData.CmdCtr++;
        -:  111:                        
    #####:  112:                        if ((RtsId + 1) <= SC_LAST_RTS_WITH_EVENTS)
        -:  113:                        {
    #####:  114:                            CFE_EVS_SendEvent (SC_RTS_START_INF_EID,
        -:  115:                                               CFE_EVS_INFORMATION,
        -:  116:                                               "RTS Number %03d Started",
        -:  117:                                               RtsId + 1);
        -:  118:                        }
        -:  119:                        else
        -:  120:                        {
    #####:  121:                            CFE_EVS_SendEvent(SC_STARTRTS_CMD_DEB_EID,
        -:  122:                                              CFE_EVS_DEBUG,
        -:  123:                                              "Start RTS #%d command", RtsId +1);
        -:  124:                        }
        -:  125:                    }
        -:  126:                    else
        -:  127:                    { /* the length field of the 1st cmd was bad */
    #####:  128:                        CFE_EVS_SendEvent (SC_STARTRTS_CMD_INVLD_LEN_ERR_EID,
        -:  129:                                           CFE_EVS_ERROR,
        -:  130:                                           "Start RTS %03d Rejected: Invld Len Field for 1st Cmd in Sequence. Invld Cmd Length = %d",
        -:  131:                                           RtsId + 1,
        -:  132:                                           CmdLength);
        -:  133:                        
    #####:  134:                        SC_AppData.CmdErrCtr++;
    #####:  135:                        SC_AppData.RtsActiveErrCtr++;
        -:  136:                        
        -:  137:                    } /* end if - check command number */
        -:  138:                }
        -:  139:                else
        -:  140:                {  /* Cannot use the RTS now */
        -:  141:                    
    #####:  142:                    CFE_EVS_SendEvent (SC_STARTRTS_CMD_NOT_LDED_ERR_EID,
        -:  143:                                       CFE_EVS_ERROR,
        -:  144:                                       "Start RTS %03d Rejected: RTS Not Loaded or In Use, Status: %d",
        -:  145:                                       RtsId + 1,
        -:  146:                                       SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus);
        -:  147:                    
    #####:  148:                    SC_AppData.CmdErrCtr++;
    #####:  149:                    SC_AppData.RtsActiveErrCtr++;
        -:  150:                    
        -:  151:                    
        -:  152:                } /* end if */
        -:  153:            }
        -:  154:            else
        -:  155:            {  /* the RTS is disabled */
    #####:  156:                CFE_EVS_SendEvent (SC_STARTRTS_CMD_DISABLED_ERR_EID,
        -:  157:                                   CFE_EVS_ERROR,
        -:  158:                                   "Start RTS %03d Rejected: RTS Disabled",
        -:  159:                                   RtsId + 1);
        -:  160:                
    #####:  161:                SC_AppData.CmdErrCtr++;
    #####:  162:                SC_AppData.RtsActiveErrCtr++;
        -:  163:                
        -:  164:            } /* end if */
        -:  165:        }
        -:  166:        else
        -:  167:        {     /* the rts id is invalid */
    #####:  168:            CFE_EVS_SendEvent (SC_STARTRTS_CMD_INVALID_ERR_EID,
        -:  169:                               CFE_EVS_ERROR,
        -:  170:                               "Start RTS %03d Rejected: Invalid RTS ID",
        -:  171:                               ((SC_RtsCmd_t *)CmdPacket) -> RtsId);
        -:  172:            
    #####:  173:            SC_AppData.CmdErrCtr++;
    #####:  174:            SC_AppData.RtsActiveErrCtr++;
        -:  175:            
        -:  176:        }
        -:  177:    }
        -:  178:    else
        -:  179:    {     /* the command length is invalid */
    #####:  180:        SC_AppData.RtsActiveErrCtr++;
        -:  181:    }
        -:  182:    
        -:  183:} /* end SC_StartRts */
        -:  184:
        -:  185:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  186:/*                                                                 */
        -:  187:/* Stops an RTS                                                    */
        -:  188:/*                                                                 */
        -:  189:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  190:void SC_StopRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
    #####:  191:{
        -:  192:    uint16      RtsId;         /* the RTS number from the command packet */
        -:  193:
    #####:  194:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:  195:    {
        -:  196:        /*
        -:  197:         ** Get the RTS id with a 'C' interface
        -:  198:         */
    #####:  199:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:  200:        
        -:  201:        /* check the command parameter */
    #####:  202:        if (RtsId < SC_NUMBER_OF_RTS)
        -:  203:        {
        -:  204:            /* stop the rts by calling a generic routine */
    #####:  205:            SC_KillRts (RtsId);
        -:  206:            
    #####:  207:            SC_AppData.CmdCtr++;
        -:  208:            
    #####:  209:            CFE_EVS_SendEvent (SC_STOPRTS_CMD_INF_EID,
        -:  210:                               CFE_EVS_INFORMATION,
        -:  211:                               "Relative Time Sequence %03d Aborted",
        -:  212:                               RtsId + 1);
        -:  213:        }
        -:  214:        else
        -:  215:        {/* the specified RTS is invalid */
        -:  216:            
        -:  217:            /* the rts id is invalid */
    #####:  218:            CFE_EVS_SendEvent (SC_STOPRTS_CMD_ERR_EID,
        -:  219:                               CFE_EVS_ERROR,
        -:  220:                               "Stop RTS %03d rejected: Invalid RTS ID",
        -:  221:                               RtsId + 1);
        -:  222:            
    #####:  223:            SC_AppData.CmdErrCtr++;
        -:  224:            
        -:  225:        } /* end if */
        -:  226:    }
        -:  227:} /* end SC_StopRtsCmd */
        -:  228:
        -:  229:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  230:/*                                                                 */
        -:  231:/* Disables an RTS                                                 */
        -:  232:/*                                                                 */
        -:  233:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  234:void SC_DisableRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
    #####:  235:{
        -:  236:    uint16      RtsId;         /* the RTS number from the command packet */
        -:  237:
    #####:  238:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:  239:    {
        -:  240:        /*
        -:  241:         ** Get the RTS id with a 'C' interface
        -:  242:         */
    #####:  243:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:  244:        
        -:  245:        /* make sure tha specified rts is valid */
    #####:  246:        if (RtsId < SC_NUMBER_OF_RTS)
        -:  247:        {
        -:  248:            
        -:  249:            /* disable the RTS */
    #####:  250:            SC_OperData.RtsInfoTblAddr[RtsId].DisabledFlag = TRUE;
        -:  251:            
        -:  252:            /* update the command status */
    #####:  253:            SC_AppData.CmdCtr++;
        -:  254:            
    #####:  255:            CFE_EVS_SendEvent (SC_DISABLE_RTS_DEB_EID,
        -:  256:                               CFE_EVS_DEBUG,
        -:  257:                               "Disabled RTS %03d",
        -:  258:                               RtsId + 1);   
        -:  259:        }
        -:  260:        else
        -:  261:        {   /* it is not a valid RTS id */
    #####:  262:            CFE_EVS_SendEvent (SC_DISRTS_CMD_ERR_EID,
        -:  263:                               CFE_EVS_ERROR,
        -:  264:                               "Disable RTS %03d Rejected: Invalid RTS ID",
        -:  265:                               RtsId + 1);
        -:  266:            
        -:  267:            /* update the command error status */
    #####:  268:            SC_AppData.CmdErrCtr++;     
        -:  269:        } /* end if */
        -:  270:    } 
        -:  271:} /* end SC_DisableRTS */
        -:  272:
        -:  273:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  274:/*                                                                 */
        -:  275:/* Enables an RTS                                                  */
        -:  276:/*                                                                 */
        -:  277:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  278:void SC_EnableRtsCmd (CFE_SB_MsgPtr_t CmdPacket)
    #####:  279:{
        -:  280:    uint16      RtsId;         /* the RTS number from the command packet */
        -:  281:
    #####:  282:    if (SC_VerifyCmdLength(CmdPacket, sizeof(SC_RtsCmd_t)))
        -:  283:    {
        -:  284:         /*
        -:  285:         ** Get the RTS id with a 'C' interface
        -:  286:         */
    #####:  287:        RtsId = ((SC_RtsCmd_t *)CmdPacket) -> RtsId - 1;
        -:  288:        /* make sure the specified rts is valid */
    #####:  289:        if (RtsId < SC_NUMBER_OF_RTS)
        -:  290:        {
        -:  291:            
        -:  292:            /* re-enable the RTS */
    #####:  293:            SC_OperData.RtsInfoTblAddr[RtsId].DisabledFlag = FALSE;
        -:  294:            
        -:  295:            /* update the command status */
    #####:  296:            SC_AppData.CmdCtr++;
        -:  297:            
    #####:  298:            CFE_EVS_SendEvent (SC_ENABLE_RTS_DEB_EID,
        -:  299:                               CFE_EVS_DEBUG ,
        -:  300:                               "Enabled RTS %03d",
        -:  301:                               RtsId + 1);
        -:  302:            
        -:  303:            
        -:  304:        }
        -:  305:        else
        -:  306:        {   /* it is not a valid RTS id */
    #####:  307:            CFE_EVS_SendEvent (SC_ENARTS_CMD_ERR_EID,
        -:  308:                               CFE_EVS_ERROR,
        -:  309:                               "Enable RTS %03d Rejected: Invalid RTS ID",
        -:  310:                               RtsId + 1);
        -:  311:            
        -:  312:            /* update the command error status */
    #####:  313:            SC_AppData.CmdErrCtr++;
        -:  314:            
        -:  315:            
        -:  316:        } /* end if */
        -:  317:    }
        -:  318:    
        -:  319:    
        -:  320:} /* end SC_EnableRTS */
        -:  321:
        -:  322:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  323:/*                                                                 */
        -:  324:/*  Kill an RTS and clear out its data                             */
        -:  325:/*                                                                 */
        -:  326:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  327:void SC_KillRts (uint16 RtsId)
    #####:  328:{    
    #####:  329:    if (SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus == SC_EXECUTING)
        -:  330:    {
        -:  331:
        -:  332:        /*
        -:  333:         ** Note, the RtsId passed is a 'C' number.
        -:  334:         ** range = 0..n
        -:  335:         */
        -:  336:        
        -:  337:        /*
        -:  338:         ** Stop the RTS from executing
        -:  339:         */
    #####:  340:        SC_OperData.RtsInfoTblAddr[RtsId].RtsStatus = SC_LOADED;
    #####:  341:        SC_OperData.RtsInfoTblAddr[RtsId].NextCommandTime = SC_MAX_TIME;
        -:  342:        
        -:  343:        /*
        -:  344:         ** Note: the rest of the fields are left alone
        -:  345:         ** to provide information on where the
        -:  346:         ** rts stopped. They are cleared out when it is restarted.
        -:  347:         */
        -:  348:        
    #####:  349:        if (SC_OperData.RtsCtrlBlckAddr -> NumRtsActive > 0)
        -:  350:        {
    #####:  351:            SC_OperData.RtsCtrlBlckAddr -> NumRtsActive--;
        -:  352:        }
        -:  353:    }
        -:  354:
        -:  355:} /* end SC_KillRts */
        -:  356:
        -:  357:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  358:/*                                                                 */
        -:  359:/* Start an RTS on initilization                                   */
        -:  360:/*                                                                 */
        -:  361:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  362:void SC_AutoStartRts (uint16 RtsNumber)
    #####:  363:{
        -:  364:    SC_RtsCmd_t   CmdPkt;    /* the command packet to start an RTS */
        -:  365:
        -:  366:    /*
        -:  367:     ** Format the command packet to start the first RTS
        -:  368:     */
        -:  369:    
    #####:  370:    CFE_SB_InitMsg(&CmdPkt, SC_CMD_MID, sizeof(SC_RtsCmd_t), TRUE);
        -:  371:    
    #####:  372:    CFE_SB_SetCmdCode((CFE_SB_MsgPtr_t)  &CmdPkt, SC_START_RTS_CC);
        -:  373:    
        -:  374:    /*
        -:  375:     ** Get the RTS ID to start.
        -:  376:     */
    #####:  377:    CmdPkt.RtsId = RtsNumber;
        -:  378:    
        -:  379:    /*
        -:  380:     ** Now send the command back to SC
        -:  381:     */
    #####:  382:    CFE_SB_SendMsg((CFE_SB_MsgPtr_t)((int)&CmdPkt));
        -:  383:       
        -:  384:} /* end SC_AutoStartRts */
        -:  385:
        -:  386:/************************/
        -:  387:/*  End of File Comment */
        -:  388:/************************/
